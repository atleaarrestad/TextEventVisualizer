@page "/timelinevisualizer/{isShowTimelineLogsMode:bool}"
@using System.Collections.ObjectModel
@using TextEventVisualizer.Services
@using TextEventVisualizer.Models
@inject ITimelineService timelineService

<PageTitle>Timeline Visualizer</PageTitle>
<div class="info">
    <h1>Timeline Visualizer</h1>
    <div class="timeline-header">
        <div class="select-container">
            <select @bind="selectedTimelineId">
                <option value="0">Select a timeline...</option>
                @foreach (var timelineBriefInfo in timelineBriefInfos)
                {
                    <option value="@timelineBriefInfo.Id">@timelineBriefInfo.Name</option>
                }
            </select>
        </div>
        @if (activeTimeline != null)
        {
            <span>Created: @activeTimeline.CreationDate.ToLocalTime()</span>
        }
    </div>
</div>
@if (!this.isShowTimelineLogsMode)
{
    <div class="timeline">

        @if (activeTimeline != null)
        {
            <div class="timeline-flex-container">
                @foreach (var timelineChunk in activeTimeline.TimelineChunks)
                {
                    <div class="timeline-chunk">
                        <div class="chunk-header">
                            <div class="article-headline">@timelineChunk.Article.Headline</div>
                            <a class="article-source" href="@timelineChunk.Article.WebUrl">(Source)</a>
                            <div class="article-publish-date">@timelineChunk.Article.Date.ToLocalTime().ToString("dd MMMM yyyy HH:mm")</div>
                            <hr />
                        </div>
                        <div class="timeline-event-container">
                            @foreach (var chunkEvent in timelineChunk.Events)
                            {
                                <div class="timeline-event">
                                    <div>@chunkEvent.Timestamp</div>
                                    <div>@chunkEvent.Content</div>
                                </div>
                            }
                        </div>
                    </div>
                }
            </div>
        }
    </div>
}
else
{
    <div class="timeline-logs-container">
        <div class="log-title_container">
            <h1 class="title">@this.TimelineGenerationName</h1>
            @{
                switch (this.TimelineGenerationStatus)
                {
                    case Status.NotStarted:
                        <span class="status-circle-red"></span>
                        <span class="status-failure"> Not started</span>
                        break;
                    case Status.InProgess:
                        <span class="status-circle-orange"></span>
                        <span class="status-pending"> In progress</span>
                        break;
                    case Status.Failed:
                        <span class="status-circle-red"></span>
                        <span class="status-failure"> Failed</span>
                        break;
                    case Status.Completed:
                        <span class="status-circle-green"></span>
                        <span class="status-success"> Completed</span>
                        break;
                    default:
                        <span class="status-circle-red"> Status unknown</span>
                        break;
                }
            }
        </div>
        <div class="log-messages-container">
            @if (this.TimelineGenerationMessages != null)
            {
                @foreach (var message in this.TimelineGenerationMessages)
                {
                    <div>@message</div>
                }
            }
        </div>
    </div>
}




@code{
    [Parameter]
    public bool isShowTimelineLogsMode { get; set; } = false;

    private Timeline? activeTimeline = null;
    private int _selectedTimelineId = 0;

    private string TimelineGenerationName = string.Empty;
    private ReadOnlyCollection<string>? TimelineGenerationMessages = null;
    private Status TimelineGenerationStatus = Status.NotStarted;

    public int selectedTimelineId {
        get => _selectedTimelineId;
        set
        {
            if (_selectedTimelineId != value && value != 0)
            {
                _selectedTimelineId = value;
                this.isShowTimelineLogsMode = false;
                OnSelectTimeline();
            }
        }
    }
    private List<TimelineBriefInfo> timelineBriefInfos = new();


    protected async override void OnInitialized()
    {
        timelineBriefInfos = await timelineService.GetAllTimelinesBriefInfoAsync();
        this.timelineService.OnTimelineGenerationStarted += OnTimelineGenerationStartedHandler;
        this.timelineService.OnTimelineGenerationMessagesUpdated += OnTimelineGenerationMessagesUpdatedHandler;
        this.timelineService.OnTimelineGenerationCompleted += OnTimelineGenerationCompletedHandler;

        this.TimelineGenerationName = timelineService.TimelineGenerationName;
        this.TimelineGenerationMessages = timelineService.GetTimelineGenerationMessages();
        this.TimelineGenerationStatus = timelineService.TimelineGenerationStatus;
        StateHasChanged();
    }

    public async void OnSelectTimeline()
    {
        this.activeTimeline = await timelineService.GetTimeline(this.selectedTimelineId);
        this.activeTimeline.TimelineChunks = this.activeTimeline.TimelineChunks.OrderBy(chunk => chunk.Article.Date).ToList();
        StateHasChanged();
    }

    public void OnTimelineGenerationStartedHandler()
    {
        InvokeAsync(() =>
        {
            this.TimelineGenerationName = timelineService.TimelineGenerationName;
            this.TimelineGenerationMessages = timelineService.GetTimelineGenerationMessages();
            this.TimelineGenerationStatus = timelineService.TimelineGenerationStatus;
            StateHasChanged();
        });
    }

    public void OnTimelineGenerationMessagesUpdatedHandler()
    {
        InvokeAsync(() =>
        {
            this.TimelineGenerationMessages = timelineService.GetTimelineGenerationMessages();
            StateHasChanged();
        });
    }

    public async void OnTimelineGenerationCompletedHandler()
    {
        this.TimelineGenerationStatus = timelineService.TimelineGenerationStatus;
        await Task.Delay(1000); // wait for timeline to be stored in database before getting the updated dropdown list
        timelineBriefInfos = await timelineService.GetAllTimelinesBriefInfoAsync();
        StateHasChanged();
    }

}