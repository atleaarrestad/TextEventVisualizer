@page "/timelinevisualizer"
@using TextEventVisualizer.Services
@using TextEventVisualizer.Models
@inject ITimelineService timelineService

<PageTitle>Timeline Visualizer</PageTitle>
<div class="info">
    <h1>Timeline Visualizer</h1>
    <div class="timeline-header">
        <div class="select-container">
            <select @bind="selectedTimelineId">
                <option value="0">Select a timeline...</option>
                @foreach (var timelineBriefInfo in timelineBriefInfos)
                {
                    <option value="@timelineBriefInfo.Id">@timelineBriefInfo.Name</option>
                }
            </select>
        </div>
        @if (activeTimeline != null)
        {
            <span>Created: @activeTimeline.CreationDate.ToLocalTime()</span>
        }
    </div>
</div>

<div class="timeline">
    
    @if (activeTimeline != null)
    {
        <div class="timeline-flex-container">
            @foreach (var timelineChunk in activeTimeline.TimelineChunks)
            {
                <div class="timeline-chunk">
                    <div class="chunk-header">
                        <div class="article-headline">@timelineChunk.Article.Headline</div>
                        <a class="article-source" href="@timelineChunk.Article.WebUrl">(Source)</a>
                        <div class="article-publish-date">@timelineChunk.Article.Date.ToLocalTime().ToString("dd MMMM yyyy HH:mm")</div>
                        <hr />
                    </div>
                    <div class="timeline-event-container">
                        @foreach (var chunkEvent in timelineChunk.Events)
                        {
                            <div class="timeline-event">
                                <div>@chunkEvent.Timestamp</div>
                                <div>@chunkEvent.Content</div>
                            </div>
                        }
                    </div>
                </div>
            }
        </div>
    }
</div>



@code{
    private Timeline? activeTimeline = null;
    private int _selectedTimelineId = 0;
    public int selectedTimelineId {
        get => _selectedTimelineId;
        set
        {
            if (_selectedTimelineId != value && value != 0)
            {
                _selectedTimelineId = value;
                OnSelectTimeline();
            }
        }
    }
    private List<TimelineBriefInfo> timelineBriefInfos = new();


    protected async override void OnInitialized()
    {
        timelineBriefInfos = await timelineService.GetAllTimelinesBriefInfoAsync();
        StateHasChanged();
    }

    public async void OnSelectTimeline()
    {
        this.activeTimeline = await timelineService.GetTimeline(this.selectedTimelineId);
        this.activeTimeline.TimelineChunks = this.activeTimeline.TimelineChunks.OrderBy(chunk => chunk.Article.Date).ToList();

        StateHasChanged();
    }

}